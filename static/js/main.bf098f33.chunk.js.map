{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js","robots.js"],"names":["Card","props","name","email","id","username","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bf098f33.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) =>{\n    const {name,email,id,username} = props\n\n    return(\n        <div className= 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\n            <h1>{id}</h1>\n            <img alt='robots' src ={`https://robohash.org/${props.id}?300x300`}></img>\n                <div>\n                    <h2 className = ''>{name}</h2>\n                    <p>{username}</p>\n                    <p>{email}</p>\n                    \n                </div>\n            \n        </div>\n\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    if(false){\n        throw new Error('NOOOOO')\n    }\n    const cardComponent = robots.map((user, i) => {\n        return (<Card \n        key ={i} \n        id = {robots[i].id} \n        name ={robots[i].name} \n        username = {robots[i].username} \n        email = {robots[i].email}\n        />\n        )\n    });\n    return (\n        <div>\n          {cardComponent}\n\n    </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n    return (\n        <div className ='pa2'>\n                <input \n                className = 'pa3 ba b--green bg-lightest-blue'\n                type = 'search' \n                placeholder = 'Search Robots' \n                onChange = {searchChange}\n                />\n                \n\n        </div>\n    )\n}\nexport default SearchBox","import React from 'react';\n\nconst Scroll = (props) =>{\n   return ( \n   <div style = {{overflowY: 'scroll',border: '1px solid black', height: '800px'}}> {props.children} </div>\n    )\n    \n};\n\nexport default Scroll;\n\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: false})\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good </h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\n\n\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n        \n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users => this.setState({robots:users}));\n        }\n\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n        \n        \n    }\n   \n    \n    render() {\n        const filteredRobot = this.state.robots.filter(robots =>{\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n       \n    \n\n        return (\n        <div className = 'tc'>\n            <h1 className = 'f2 f1-l fw2 white-90 mb0 lh-title'>Robot Friends</h1>\n            <SearchBox  searchChange = {this.onSearchChange}/>\n           <Scroll>\n               <ErrorBoundry>\n                   <CardList robots = {filteredRobot} />\n                   </ErrorBoundry>\n               \n           </Scroll>\n            \n           \n\n            \n        </div>\n        );\n    }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App robots ={robots} />\n   \n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    },\n    {\n        id: 11,\n        name: 'Musab Hamid',\n        username: 'musabhamid118',\n        email: 'musabhamid118@gmail.com'\n      },\n      {\n        id: 12,\n        name: 'Mohammed Hamid',\n        username: 'Moe',\n        email: 'Moe@gmail.com'\n      },\n  ];\n  "],"sourceRoot":""}